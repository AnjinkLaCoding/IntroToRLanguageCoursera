| One of the great advantages of using a statistical programming language like R is its vast collection of tools
| for simulating random numbers.

...

  |===                                                                                                    |   3%
| This lesson assumes familiarity with a few common probability distributions, but these topics will only be
| discussed with respect to random number generation. Even if you have no prior experience with these concepts,
| you should be able to complete the lesson and understand the main ideas.

...

  |======                                                                                                 |   6%
| The first function we'll use to generate random numbers is sample(). Use ?sample to pull up the documentation.

> ?sample

| You are doing so well!

  |=========                                                                                              |   9%
| Let's simulate rolling four six-sided dice: sample(1:6, 4, replace = TRUE).

> sample(1:6, 4, replace = TRUE)
[1] 3 6 3 1

| You got it!

  |============                                                                                           |  12%
| Now repeat the command to see how your result differs. (The probability of rolling the exact same result is
| (1/6)^4 = 0.00077, which is pretty small!)

> sample(1:6, 4, replace = TRUE)
[1] 4 3 5 5

| Your dedication is inspiring!

  |================                                                                                       |  15%
| sample(1:6, 4, replace = TRUE) instructs R to randomly select four numbers between 1 and 6, WITH replacement.
| Sampling with replacement simply means that each number is "replaced" after it is selected, so that the same
| number can show up more than once. This is what we want here, since what you roll on one die shouldn't affect
| what you roll on any of the others.

...

  |===================                                                                                    |  18%
| Now sample 10 numbers between 1 and 20, WITHOUT replacement. To sample without replacement, simply leave off
| the 'replace' argument.

> sample(1:20, 10)
 [1]  4 19  2 16  8  7  1  6  5 11

| Nice work!

  |======================                                                                                 |  21%
| Since the last command sampled without replacement, no number appears more than once in the output.

...

  |=========================                                                                              |  24%
| LETTERS is a predefined variable in R containing a vector of all 26 letters of the English alphabet. Take a
| look at it now.

> LETTERS
 [1] "A" "B" "C" "D" "E" "F" "G" "H" "I" "J" "K" "L" "M" "N" "O" "P" "Q" "R" "S" "T" "U" "V" "W" "X" "Y" "Z"

| You are really on a roll!

  |============================                                                                           |  27%
| The sample() function can also be used to permute, or rearrange, the elements of a vector. For example, try
| sample(LETTERS) to permute all 26 letters of the English alphabet.

> sample(LETTERS)
 [1] "T" "N" "Q" "H" "M" "S" "U" "I" "L" "G" "K" "E" "Y" "P" "X" "C" "O" "J" "Z" "B" "W" "A" "F" "D" "R" "V"

| That's a job well done!

  |===============================                                                                        |  30%
| This is identical to taking a sample of size 26 from LETTERS, without replacement. When the 'size' argument to
| sample() is not specified, R takes a sample equal in size to the vector from which you are sampling.

...

  |==================================                                                                     |  33%
| Now, suppose we want to simulate 100 flips of an unfair two-sided coin. This particular coin has a 0.3
| probability of landing 'tails' and a 0.7 probability of landing 'heads'.

...

  |=====================================                                                                  |  36%
| Let the value 0 represent tails and the value 1 represent heads. Use sample() to draw a sample of size 100
| from the vector c(0,1), with replacement. Since the coin is unfair, we must attach specific probabilities to
| the values 0 (tails) and 1 (heads) with a fourth argument, prob = c(0.3, 0.7). Assign the result to a new
| variable called flips.

> sample(c(0,1), 100, replacement = TRUE)
Error in sample(c(0, 1), 100, replacement = TRUE) : 
  unused argument (replacement = TRUE)
> flips <- sample(c(0,1), 100, replace = TRUE)

| Give it another try. Or, type info() for more options.

| The following command will produce 100 flips of an unfair coin and assign the result: flips <- sample(c(0,1),
| 100, replace = TRUE, prob = c(0.3, 0.7))

> flips <- sample(c(0,1), 100, replace = TRUE, prob = c(0.3, 0.7))

| You got it!

  |=========================================                                                              |  39%
| View the contents of the flips variable.

> flips
  [1] 1 1 0 1 1 1 1 1 1 1 0 1 1 1 0 1 0 0 0 0 1 1 1 0 1 0 1 0 0 0 1 1 1 0 1 1 1 1 1 0 1 1 1 0 0 0 1 1 0 1 0 1 1 0
 [55] 1 1 1 1 1 1 1 1 1 1 0 0 0 1 1 1 1 0 0 1 0 0 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 1 1 0 0

| You nailed it! Good job!

  |============================================                                                           |  42%
| Since we set the probability of landing heads on any given flip to be 0.7, we'd expect approximately 70 of our
| coin flips to have the value 1. Count the actual number of 1s contained in flips using the sum() function.

> sum(flips)
[1] 67

| Excellent job!

  |===============================================                                                        |  45%
| A coin flip is a binary outcome (0 or 1) and we are performing 100 independent trials (coin flips), so we can
| use rbinom() to simulate a binomial random variable. Pull up the documentation for rbinom() using ?rbinom.

> ?rbinom

| Your dedication is inspiring!

  |==================================================                                                     |  48%
| Each probability distribution in R has an r*** function (for "random"), a d*** function (for "density"), a
| p*** (for "probability"), and q*** (for "quantile"). We are most interested in the r*** functions in this
| lesson, but I encourage you to explore the others on your own.

...

  |=====================================================                                                  |  52%
| A binomial random variable represents the number of 'successes' (heads) in a given number of independent
| 'trials' (coin flips). Therefore, we can generate a single random variable that represents the number of heads
| in 100 flips of our unfair coin using rbinom(1, size = 100, prob = 0.7). Note that you only specify the
| probability of 'success' (heads) and NOT the probability of 'failure' (tails). Try it now.

> rbinom(1, size = 100, prob = 0.7)
[1] 64

| You got it right!

  |========================================================                                               |  55%
| Equivalently, if we want to see all of the 0s and 1s, we can request 100 observations, each of size 1, with
| success probability of 0.7. Give it a try, assigning the result to a new variable called flips2.

> flips2 <- rbinom(1, size = 100, prob = 0.7)

| Not quite, but you're learning! Try again. Or, type info() for more options.

| Call rbinom() with n = 100, size = 1, and prob = 0.7 and assign the result to flips2.

> flips2 <- rbinom(1, n = 100, size = 1, prob = 0.7)
Error in rbinom(1, n = 100, size = 1, prob = 0.7) : unused argument (1)
> flips2 <- rbinom(n = 100, size = 1, prob = 0.7)

| You are really on a roll!

  |===========================================================                                            |  58%
| View the contents of flips2.

> flips2
  [1] 1 0 0 1 1 0 0 1 1 1 1 1 0 1 1 1 0 1 1 1 1 0 1 1 1 0 1 1 0 1 1 0 1 1 1 1 1 0 1 1 1 1 1 0 0 1 0 1 1 1 1 1 1 1
 [55] 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 1 1 1 1 1 0 1 1 0 1 1 0 1 1 1 1 1 1 0 1 1 1 1 0 1 0 0 0 1 1 1

| You nailed it! Good job!

  |==============================================================                                         |  61%
| Now use sum() to count the number of 1s (heads) in flips2. It should be close to 70!

> sum(flips2)
[1] 76

| All that hard work is paying off!

  |==================================================================                                     |  64%
| Similar to rbinom(), we can use R to simulate random numbers from many other probability distributions. Pull
| up the documentation for rnorm() now.

> ?rnorm

| You nailed it! Good job!

  |=====================================================================                                  |  67%
| The standard normal distribution has mean 0 and standard deviation 1. As you can see under the 'Usage' section
| in the documentation, the default values for the 'mean' and 'sd' arguments to rnorm() are 0 and 1,
| respectively. Thus, rnorm(10) will generate 10 random numbers from a standard normal distribution. Give it a
| try.

> rnorm(10)
 [1]  0.32474845  0.05916030 -0.67175506  0.05026438 -0.30452410 -0.65756707 -0.84963023 -0.07583114 -1.64159581
[10] -0.02490457

| You are quite good my friend!

  |========================================================================                               |  70%
| Now do the same, except with a mean of 100 and a standard deviation of 25.

> rnorm(10, mean = 100, sd = 25)
 [1]  94.03189  81.44124  91.22142  98.89123 102.72948  70.79964  90.23112  46.95466 119.37804  99.51415

| You're the best!

  |===========================================================================                            |  73%
| Finally, what if we want to simulate 100 *groups* of random numbers, each containing 5 values generated from a
| Poisson distribution with mean 10? Let's start with one group of 5 numbers, then I'll show you how to repeat
| the operation 100 times in a convenient and compact way.

...

  |==============================================================================                         |  76%
| Generate 5 random values from a Poisson distribution with mean 10. Check out the documentation for rpois() if
| you need help.

> ?rpois
> rpois(5, 10)
[1] 11 11 18  8 13

| Keep working like that and you'll get there!

  |=================================================================================                      |  79%
| Now use replicate(100, rpois(5, 10)) to perform this operation 100 times. Store the result in a new variable
| called my_pois.

> my_pois <- replicate(100, rpois(5,10))

| You are really on a roll!

  |====================================================================================                   |  82%
| Take a look at the contents of my_pois.

> my_pois
     [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] [,11] [,12] [,13] [,14] [,15] [,16] [,17] [,18] [,19]
[1,]    7   10    7    7    8   15    9   10    8    10    12     8     6    15     7     9    13    15     9
[2,]   10   13   12   12    9    7   11   11    6    12     8     7    10    10    12     8    13    16    10
[3,]    7    7    7    9   10    6   14    7   12    13     9     8    13     7     8    11     9    13     5
[4,]    9    9   13    7   12    4   12   12   11    16     5    12    11    11    10    14     6    14    16
[5,]    8   13    3   13    8    6   14    2    6     6    11     7     9     9     7     9    11    13    13
     [,20] [,21] [,22] [,23] [,24] [,25] [,26] [,27] [,28] [,29] [,30] [,31] [,32] [,33] [,34] [,35] [,36] [,37]
[1,]    15    10     8    10    10    10     8    13    10     8    14    14     9    11    14     9    11    11
[2,]     8     9    10    11    13     8     7    10    10     8    10     5     8     7     9     9    14     9
[3,]    11     9    12     9    16    13    10     8    12     7    11    12     8    19    11     9     7     7
[4,]     7    12     7     7    15    15    10     9    11     4     8    10     9     9    10    14    10     4
[5,]     7     8    11     7    10    10     4     9    10     4    11     3    14     7     8    10     7     9
     [,38] [,39] [,40] [,41] [,42] [,43] [,44] [,45] [,46] [,47] [,48] [,49] [,50] [,51] [,52] [,53] [,54] [,55]
[1,]    10     3    11     7    14     5    18     8     8    14     7    16     5    10     9    12    10    15
[2,]    10     4    10     8    15     9     9    13     6    13     6     7     8    12    16    11    13    13
[3,]     8    10    14     3     6    15    13     8    11    12    16    13    10    10    10     3     7     7
[4,]    16    12    13     6     8     8    11    14    10     9     8    13    10     9    12    12    16    13
[5,]     8     6     3    11    13     8     9     5     9    13     9    10    10    11    13     8    11     6
     [,56] [,57] [,58] [,59] [,60] [,61] [,62] [,63] [,64] [,65] [,66] [,67] [,68] [,69] [,70] [,71] [,72] [,73]
[1,]    10    11     8     8    14     3    15    15    10     9    13     8    11    10    10     9     5    15
[2,]    11    10    10     8     8     7     8     7    11     9    18    12     8     9    10    13    12    10
[3,]    13    14     9    11    10    12    13    10    16    15    11     8     7    10    12     8     9    10
[4,]    12    15     6     7    10    13     7    13     4    13    10     8    12    13    17     7     9    15
[5,]     8     7    14    13    11    13    14     6    16    11    11    16     6     9     9    14     8     9
     [,74] [,75] [,76] [,77] [,78] [,79] [,80] [,81] [,82] [,83] [,84] [,85] [,86] [,87] [,88] [,89] [,90] [,91]
[1,]     3    12    12     9     9    12    14     5    15    13    11     6     8     6    17    14    11    11
[2,]    14     7    16     4    13    11     9    14    11     9    15     9    17     3     7    11     7     7
[3,]     8     8     8    10     3     8    12     7    12     7    15    10    14     7     8     7    15     7
[4,]    15    16     9     7    12    11    14     5    11    14    12    14     9    13    12     6    10     5
[5,]     9    15     9    12    10    13    21    12     9    12     9     9     8    13    18     9    13    12
     [,92] [,93] [,94] [,95] [,96] [,97] [,98] [,99] [,100]
[1,]    14    10     7    22    13     9     8    10      6
[2,]    11    14     6    11    17    11    10    13      9
[3,]    16    11     5     9     8     8    14     9      9
[4,]    11     7     9     5    17     7    10     9      6
[5,]     6    13     6    12     9     9     8     8      8

| You nailed it! Good job!

  |=======================================================================================                |  85%
| replicate() created a matrix, each column of which contains 5 random numbers generated from a Poisson
| distribution with mean 10. Now we can find the mean of each column in my_pois using the colMeans() function.
| Store the result in a variable called cm.

> cm <- colMeans(my_pois)

| That's a job well done!

  |===========================================================================================            |  88%
| And let's take a look at the distribution of our column means by plotting a histogram with hist(cm).

> hist(cm)

| Nice work!

  |==============================================================================================         |  91%
| Looks like our column means are almost normally distributed, right? That's the Central Limit Theorem at work,
| but that's a lesson for another day!

...

  |=================================================================================================      |  94%
| All of the standard probability distributions are built into R, including exponential (rexp()), chi-squared
| (rchisq()), gamma (rgamma()), .... Well, you see the pattern.

...

  |====================================================================================================   |  97%
| Simulation is practically a field of its own and we've only skimmed the surface of what's possible. I
| encourage you to explore these and other functions further on your own.
